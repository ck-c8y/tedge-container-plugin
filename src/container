#!/bin/sh
set -e

EXIT_OK=0
EXIT_USAGE=1
EXIT_FAILURE=2
# EXIT_RETRY=3

usage() {
    echo "
USAGE
    Docker plugin for thin-edge.io

    $0 <COMMAND> [MODULE_NAME] [--module-version [VERSION]] [--file [FILE]]

    $0 install <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 list
    $0 remove <MODULE_NAME> [--module-version [VERSION]]
    $0 prepare <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 finalize <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 update-list <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    "
}

log() { echo "$@" >&2; }

if [ $# -lt 1 ]; then
    log "Invalid number of positional arguments."
    usage
    exit "$EXIT_USAGE"
fi

COMMAND="$1"
shift
MODULE_VERSION=latest
FILE=

# settings
PRUNE_IMAGES=0
VALIDATE_TAR_CONTENTS=0
CONTAINER_CLI=
CONTAINER_CLI_OPTIONS="docker podman nerdctl"
CONTAINER_RUN_OPTIONS=
ALWAYS_PULL_IMAGE=0
# use a dedicate network to make it easier to reach all the application
CONTAINER_DEFAULT_NETWORK=tedge

# Only read the file if it has the correct permissions, to prevent people from editing it
# and side-loading functions
SETTINGS_FILE=/etc/tedge-container-plugin/env
FOUND_FILE=
if [ -f "$SETTINGS_FILE" ]; then
    FOUND_FILE=$(find "$SETTINGS_FILE" -perm 644 | head -1)
fi

if [ -n "$FOUND_FILE" ]; then
    log "Loading setting file: $SETTINGS_FILE"
    # Note: automatically export sourced variables to the environment
    # as cli commands need to react to variables such as: DOCKER_HOST
    set -a
    # shellcheck disable=SC1091,SC1090
    . "$SETTINGS_FILE"
    set +a
fi

# Detect which container cli is available
if [ -z "$CONTAINER_CLI" ]; then
    for cli in $CONTAINER_CLI_OPTIONS; do
        if command -v "$cli" >/dev/null 2>&1; then
            log "Using $cli as the container cli"
            CONTAINER_CLI="$cli"
            break
        fi
    done
fi

# argument parsing
while [ $# -gt 0 ]; do
  case "$1" in
    --module-version)
        MODULE_VERSION="$2"
        shift
        ;;
    --file)
        FILE="$2"
        shift
        ;;
    -h|--help)
        usage
        exit "$EXIT_USAGE"
        ;;
    --*|-*)
        log "Unknown option $1"
        exit "$EXIT_USAGE"
        ;;
    *)
        MODULE_NAME="$1"

        if [ -z "$MODULE_NAME" ]; then
            log "Ignoring unknown positional argument: $1"
        fi
      ;;
  esac
  shift
done

if ! command -v "$CONTAINER_CLI" >/dev/null 2>&1; then
    log "$CONTAINER_CLI is not installed"
    exit "$EXIT_FAILURE"
fi

if ! "$CONTAINER_CLI" ps >/dev/null 2>&1; then
    log "$CONTAINER_CLI does not have permissions to run"
    exit "$EXIT_FAILURE"
fi

publish_health() {
    TOPIC_ROOT=$(tedge config get mqtt.topic_root)
    TOPIC_ID=$(tedge config get mqtt.device_topic_id)
    SERVICE_NAME="$1"
    MESSAGE="$2"
    
    SERVICE_TOPIC=""
    case "$TOPIC_ID" in
        */*//)
            parent="$(echo "$TOPIC_ID" | sed 's/\/*$//')"
            SERVICE_TOPIC="$parent/service/$SERVICE_NAME"
            ;;
    esac

    if [ -n "$SERVICE_TOPIC" ]; then
        tedge mqtt pub -r "$TOPIC_ROOT/$SERVICE_TOPIC/status/health" "$2" ||:
    fi
}

case "$COMMAND" in
    list)
        # Get all container and lookup the image id related to it
        # The version is a combination of the tag (human friendly) and the id (for uniqueness), e.g. Version="{Tag}@{Id}"
        # Exclude docker compose containers
        "$CONTAINER_CLI" ps -a --format "{{.Names}}\t{{.Image}}\t{{.Labels}}" | grep -v "com.docker.compose" | while read -r line; do
            ITEM_NAME=$(echo "$line" | cut -f1)
            ITEM_IMAGE=$(echo "$line" | cut -f2 | sed 's/\(.*\)/\1/')
            ITEM_VERSION=$("$CONTAINER_CLI" image ls "$ITEM_IMAGE" --format "{{.Repository}}:{{.Tag}}@{{.ID}}")

            printf '%s\t%s\n' "$ITEM_NAME" "$ITEM_VERSION"
        done
        ;;

    install)
        # Import container image
        if [ -z "$FILE" ]; then
            EXISTING_IMAGE_ID=$("$CONTAINER_CLI" images -q "${MODULE_VERSION}")

            if [ "$ALWAYS_PULL_IMAGE" = 1 ] || [ -z "$EXISTING_IMAGE_ID" ]; then
                log "Pulling image (ALWAYS_PULL_IMAGE=$ALWAYS_PULL_IMAGE): ${MODULE_VERSION}"
                "$CONTAINER_CLI" pull "${MODULE_VERSION}"
            else
                # log info about why the image wasn't pulled
                if [ "$ALWAYS_PULL_IMAGE" = 0 ]; then
                    log "Skipping image pull as the image is already present. IMAGE_PRESENT=$EXISTING_IMAGE_ID"
                fi
            fi
        elif [ -f "$FILE" ]; then
            log "Loading image from file: $FILE"
            CMD_OUTPUT=$("$CONTAINER_CLI" load --input "$FILE" 2>&1)
            log "$CONTAINER_CLI output: $CMD_OUTPUT"
            PARTS=$(echo "$CMD_OUTPUT" | tail -n 1 | sed 's/Loaded image: \+//g')
            TAR_IMAGE_NAME=$(echo "$PARTS" | cut -d':' -f1)
            TAR_IMAGE_TAG=$(echo "$PARTS" | cut -d':' -f2)

            # Validate the image/tag against expected fields
            if [ "$VALIDATE_TAR_CONTENTS" = 1 ]; then
                if [ "${TAR_IMAGE_NAME}:${TAR_IMAGE_TAG}" != "${MODULE_VERSION}" ]; then
                    log "Container image file does not match expected image/tag. got=${TAR_IMAGE_NAME}:${TAR_IMAGE_TAG}, wanted=${MODULE_NAME}:${MODULE_VERSION}"
                    exit "$EXIT_FAILURE"
                else
                    log "Container image matched expected image/tag"
                fi
            fi
        else
            log "Failed to load image. File does not exist: $FILE"
            exit "$EXIT_FAILURE"
        fi

        # Start container
        if "$CONTAINER_CLI" inspect "${MODULE_NAME}" >/dev/null 2>&1; then
            log "Stopping existing container before recreating"
            "$CONTAINER_CLI" stop "${MODULE_NAME}" || true
            "$CONTAINER_CLI" rm "${MODULE_NAME}" || true
        fi

        if [ -n "$CONTAINER_RUN_OPTIONS" ]; then
            log "Adding custom run options: $CONTAINER_RUN_OPTIONS"
        fi

        NETWORK_OPTIONS=
        if [ -n "$CONTAINER_DEFAULT_NETWORK" ]; then
            if ! "$CONTAINER_CLI" network inspect "$CONTAINER_DEFAULT_NETWORK"; then
                if ! "$CONTAINER_CLI" network create "$CONTAINER_DEFAULT_NETWORK"; then
                    log "Failed to create container network. name=$CONTAINER_DEFAULT_NETWORK"
                    exit "$EXIT_FAILURE"
                fi
            fi
            NETWORK_OPTIONS="--network $CONTAINER_DEFAULT_NETWORK"
        fi

        # Note: $CONTAINER_RUN_OPTIONS CAN NOT be surrouded with quotes as we are in 
        # sh not bash, and we need to expand the arguments to . In bash this would be done in any array
        # using "${CONTAINER_RUN_OPTIONS[@]}", but in a posix shell we have limited options.
        # shellcheck disable=SC2086
        "$CONTAINER_CLI" run \
            -d \
            --publish-all \
            --name "${MODULE_NAME}" \
            $NETWORK_OPTIONS \
            $CONTAINER_RUN_OPTIONS \
            "${MODULE_VERSION}"

        if command -v /usr/bin/tedge-container-monitor >/dev/null 2>&1; then
            # Wait before checking the first status
            sleep 1
            log "Trying to update container health status for $MODULE_NAME"
            /usr/bin/tedge-container-monitor "$MODULE_NAME" ||:
        fi

        ;;

    remove)
        # don't fail if it does not exist
        log "Removing container: ${MODULE_NAME}:${MODULE_VERSION}"
        "$CONTAINER_CLI" stop "${MODULE_NAME}" || true
        "$CONTAINER_CLI" rm "${MODULE_NAME}" || true

        # TODO: service monitoring does not support deleting a service
        # so at least mark it as uninstalled
        if command -V tedge >/dev/null 2>&1; then
            log "Updating health endpoint to being uninstalled"
            MESSAGE="$(printf '{"status":"uninstalled","type":"%s"}' "${SERVICE_TYPE:-container}" )"
            publish_health "$MODULE_NAME" "$MESSAGE" ||:
        fi
        ;;

    prepare)
        ;;

    finalize)
        if [ "$PRUNE_IMAGES" = 1 ]; then
            log "Removing unused images"
            "$CONTAINER_CLI" image prune --force
        fi
        ;;

    update-list)
        TAB=$(echo t | tr t \\t)
        while IFS="$TAB" read -r ACTION MODULE VERSION FILE
        do
            sh -c "$0 '$ACTION' '$MODULE' --module-version '$VERSION' --file '$FILE'"
        done
        ;;
esac

exit "$EXIT_OK"
